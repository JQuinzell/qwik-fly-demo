Parameters:
  ParentStackName:
    Type: String
    Description: Name of the parent stack that contains the ALB
  ECRImageURI:
    Type: String
    Description: URI of the ECR image for the new service
  DomainName:
    Type: String
    Description: Custom domain name (e.g., example.com)

Resources:
  NewTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${AWS::StackName}-targetGroup'
      Port: 80
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${ParentStackName}-VpcId'
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2

  # Certificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref DomainName
  #     SubjectAlternativeNames:
  #       - !Sub '*.${DomainName}'
  #     ValidationMethod: DNS

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub '${DomainName}.'
      Name: !Sub 'v2.${DomainName}'
      Type: A
      AliasTarget:
        DNSName:
          Fn::ImportValue: !Sub '${ParentStackName}-LoadBalancerDNSName'
        # TODO: do not hardcode this
        HostedZoneId: Z03496931K53OQJJRWXHK
        EvaluateTargetHealth: true

  NewListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      ListenerArn:
        Fn::ImportValue: !Sub '${ParentStackName}-ListenerArn'
      Priority: 10
      Conditions:
        - Field: host-header
          Values:
            - !Sub 'v2.${DomainName}'
      Actions:
        - Type: forward
          TargetGroupArn: !Ref NewTargetGroup

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Fn::ImportValue: !Sub '${ParentStackName}-ClusterName'
      ServiceName: !Sub '${AWS::StackName}-service'
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            Fn::Split:
              - ','
              - Fn::ImportValue: !Sub '${ParentStackName}-SubnetIds'
          SecurityGroups:
            - Fn::ImportValue: !Sub '${ParentStackName}-ECSSecurityGroupId'
      LoadBalancers:
        - TargetGroupArn: !Ref NewTargetGroup
          ContainerName: nodejs-app
          ContainerPort: 80

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${AWS::StackName}-taskDefinition'
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue: !Sub '${ParentStackName}-TaskExecutionRoleArn'
      TaskRoleArn:
        Fn::ImportValue: !Sub '${ParentStackName}-ContainerRoleArn'
      ContainerDefinitions:
        - Name: nodejs-app
          Image: !Ref ECRImageURI
          Essential: true
          Environment:
            - Name: PORT
              Value: '80'
          PortMappings:
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-create-group: true
              awslogs-group: !Sub '/ecs/${AWS::StackName}-logs'
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: nodejs-app

Outputs:
  NewServiceName:
    Description: Name of the new ECS service
    Value: !Ref ECSService
  NewTaskDefinitionArn:
    Description: ARN of the new ECS task definition
    Value: !Ref ECSTaskDefinition
